###[message] message is the input property
###(update) update is the event emitted by child component
###$event.text refers to {text:message} in  (click)="update.emit({text:message})" in child component


import { Component, Inject } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `<div>

  <ul>
    <li *ngFor="let message of mail.messages">{{message.text}}</li>
  </ul>
  
  <app-simple-form 
    *ngFor="let message of mail.messages"
    [message]="message.text"
    (update)="onUpdate(message.id, $event.text)"
    >
    
  </app-simple-form>


</div>`
})
export class AppComponent {

  onUpdate(id, text){
    this.mail.update(id, text);
  }

  constructor(
    @Inject('mail') private mail
  ){}
}
 

###https://angular.io/guide/component-interaction
passing an Object and a string to child component

import { Component } from '@angular/core';
import { HEROES } from './hero';
HeroParentComponent
@Component({
  selector: 'hero-parent',
  template: `
    <h2>{{master}} controls {{heroes.length}} heroes</h2>
    <hero-child *ngFor="let hero of heroes"
      [hero]="hero"
      [master]="master">
    </hero-child>
  `
})
export class HeroParentComponent {
  heroes = HEROES;
  master = 'Master';
}


HeroChildComponent

import { Component, Input } from '@angular/core';
import { Hero } from './hero';
@Component({
  selector: 'hero-child',
  template: `
    <h3>{{hero.name}} says:</h3>
    <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>
  `
})
export class HeroChildComponent {
  @Input() hero: Hero;
  @Input('master') masterName: string;
}

hero.ts

export class Hero {
  name: string;
}

export const HEROES = [
  {name: 'Mr. IQ'},
  {name: 'Magneta'},
  {name: 'Bombasto'}
];



#Intercept input property changes with a setter
https://angular.io/guide/component-interaction#intercept-input-property-changes-with-a-setter

name-child component
@Input()
  set name(name: string) {
    this._name = (name && name.trim()) || '<no name set>';
  }
  
  
  
name-parent component  

@Component({
  selector: 'name-parent',
  template: `
  <h2>Master controls {{names.length}} names</h2>
  <name-child *ngFor="let name of names" [name]="name"></name-child>
  `
})
export class NameParentComponent {
  // Displays 'Mr. IQ', '<no name set>', 'Bombasto'
  names = ['Mr. IQ', '   ', '  Bombasto  '];
}




  












